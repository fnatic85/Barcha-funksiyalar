def sieve_of_eratosthenes(n):
    """
    Находит все простые числа до числа n с помощью алгоритма Эратосфена.
    """
    # Создаем булевый список (массив) "is_prime" размером n+1
    # Инициализируем все элементы как True, предполагая, что все числа простые
    is_prime = [True] * (n + 1)
    # 0 и 1 не являются простыми числами
    is_prime[0] = is_prime[1] = False
    
    # Начинаем с первого простого числа, 2
    p = 2
    
    # Итерация до корня из n, так как все составные числа
    # до n имеют хотя бы один простой делитель, не превышающий √n
    while p * p <= n:
        # Если p все еще помечено как простое
        if is_prime[p]:
            # Помечаем все кратные p как составные (не простые)
            # Начинаем с p*p, так как все меньшие кратные
            # уже были помечены предыдущими простыми числами
            for i in range(p * p, n + 1, p):
                is_prime[i] = False
        p += 1
    
    # Собираем все числа, которые остались помеченными как True
    prime_numbers = [i for i, is_p in enumerate(is_prime) if is_p]
    
    return prime_numbers

# Пример использования:
limit = 30
primes = sieve_of_eratosthenes(limit)
print(f"Простые числа до {limit}:")
print(primes)

